name: "VGG_CNN_M_2048"
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
#  transform_param {
#    mirror: true
#    crop_size: 240
#    mean_file: "examples/ucf101_flow/flow_mean_1_2.binaryproto"
#  }
# mean pixel / channel-wise mean instead of mean image
  transform_param {
   mean_value: 104
   mean_value: 117
   mean_value: 123
   mirror: false
  }
  data_param {
    source: "/home/mpss2015m_1/DeepAudio/iLID-Data/languages/trainingdb"
    batch_size: 10
    backend: LEVELDB
  }
}
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
#  transform_param {
#    mirror: false
#    crop_size: 240
#   mean_file: "examples/ucf101_flow/flow_mean_1_2.binaryproto"
#  }
# mean pixel / channel-wise mean instead of mean image
  transform_param {
   crop_size: 224
   mean_value: 104
   mean_value: 117
   mean_value: 123
   mirror: false
  }
  data_param {
    source: "/home/mpss2015m_1/DeepAudio/iLID-Data/languages/testdb"
    batch_size: 4
    backend: LEVELDB
  }
}

layer {
  bottom: "data"
  top: "conv1"
  name: "conv1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 7
    stride: 2
	weight_filler {
	  type: "gaussian" # initialize the filters from a Gaussian
	  std: 0.01        # distribution with stdev 0.01 (default mean: 0)
    }
	bias_filler {
	  type: "constant" # initialize the biases to zero (0)
      value: 0
	}
  }
}
layer {
  bottom: "conv1"
  top: "conv1"
  name: "Relu1"
  type: "ReLU"
}
layer {
  bottom: "conv1"
  top: "norm1"
  name: "norm1"
  type: "LRN"
  lrn_param {
    local_size: 5
    alpha: 0.0005
    beta: 0.75
    k: 2
  }
}
layer {
  bottom: "norm1"
  top: "pool1"
  name: "pool1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  bottom: "pool1"
  top: "conv2"
  name: "conv2"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 5
    stride: 2
	weight_filler {
	  type: "gaussian" # initialize the filters from a Gaussian
	  std: 0.01        # distribution with stdev 0.01 (default mean: 0)
    }
	bias_filler {
	  type: "constant" # initialize the biases to zero (0)
      value: 0
	}
  }
}
layer {
  bottom: "conv2"
  top: "conv2"
  name: "relu2"
  type: "ReLU"
}
layer {
  bottom: "conv2"
  top: "norm2"
  name: "norm2"
  type: "LRN"
  lrn_param {
    local_size: 5
    alpha: 0.0005
    beta: 0.75
    k: 2
  }
}
layer {
  bottom: "norm2"
  top: "pool2"
  name: "pool2"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  bottom: "pool2"
  top: "conv3"
  name: "conv3"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
	weight_filler {
	  type: "gaussian" # initialize the filters from a Gaussian
	  std: 0.01        # distribution with stdev 0.01 (default mean: 0)
    }
	bias_filler {
	  type: "constant" # initialize the biases to zero (0)
      value: 0
	}
  }
}
layer {
  bottom: "conv3"
  top: "conv3"
  name: "relu3"
  type: "ReLU"
}
layer {
  bottom: "conv3"
  top: "conv4"
  name: "conv4"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
	weight_filler {
	  type: "gaussian" # initialize the filters from a Gaussian
	  std: 0.01        # distribution with stdev 0.01 (default mean: 0)
    }
	bias_filler {
	  type: "constant" # initialize the biases to zero (0)
      value: 0
	}
   }
}
layer {
  bottom: "conv4"
  top: "conv4"
  name: "relu4"
  type: "ReLU"
}
layer {
  bottom: "conv4"
  top: "conv5"
  name: "conv5"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
	weight_filler {
	  type: "gaussian" # initialize the filters from a Gaussian
	  std: 0.01        # distribution with stdev 0.01 (default mean: 0)
    }
	bias_filler {
	  type: "constant" # initialize the biases to zero (0)
      value: 0
	}
  }
}
layer {
  bottom: "conv5"
  top: "conv5"
  name: "relu5"
  type: "ReLU"
}
layer {
  bottom: "conv5"
  top: "pool5"
  name: "pool5"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  bottom: "pool5"
  top: "fc6"
  name: "fc6"
  type: "InnerProduct"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
	weight_filler {
	  type: "gaussian" # initialize the filters from a Gaussian
	  std: 0.01        # distribution with stdev 0.01 (default mean: 0)
    }
	bias_filler {
	  type: "constant" # initialize the biases to zero (0)
      value: 0
	}
  }
}
layer {
  bottom: "fc6"
  top: "fc6"
  name: "relu6"
  type: "ReLU"
}
layer {
  bottom: "fc6"
  top: "fc6"
  name: "drop6"
  type: "Dropout"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  bottom: "fc6"
  top: "fc7"
  name: "fc7"
  type: "InnerProduct"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2048
	weight_filler {
	  type: "gaussian" # initialize the filters from a Gaussian
	  std: 0.01        # distribution with stdev 0.01 (default mean: 0)
    }
	bias_filler {
	  type: "constant" # initialize the biases to zero (0)
      value: 0
	}
  }
}
layer {
  bottom: "fc7"
  top: "fc7"
  name: "relu7"
  type: "ReLU"
}
layer {
  bottom: "fc7"
  top: "fc7"
  name: "drop7"
  type: "Dropout"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc8_new"
  type: "InnerProduct"
  bottom: "fc7"
  top: "fc8_new"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2
	weight_filler {
	  type: "gaussian" # initialize the filters from a Gaussian
	  std: 0.01        # distribution with stdev 0.01 (default mean: 0)
    }
	bias_filler {
	  type: "constant" # initialize the biases to zero (0)
      value: 0
	}
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "fc8_new"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc8_new"
  bottom: "label"
  top: "loss"
}
